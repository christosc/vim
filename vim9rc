vim9script
# When started as "evim", evim.vim will already have done these settings, bail
# out.
if v:progname =~? "evim"
  finish
endif

# Get the defaults that most users want.
source $VIMRUNTIME/defaults.vim

# Don't highlight literals within C comments (set by defaults.vim).
#unlet c_comment_strings

if has("vms")
  set nobackup		# do not keep a backup file, use versions instead
else
  set backup		# keep a backup file (restore to previous version)
  if has('persistent_undo')
    set undofile	# keep an undo file (undo changes after closing)
  endif
endif

#if &t_Co > 2 || has("gui_running")
#  " Switch on highlighting the last used search pattern.
#  set hlsearch
#endif

# Put these in an autocmd group, so that we can delete them easily.
augroup vimrcEx
  au!

  # For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78
augroup END

# Add optional packages.
#
# The matchit plugin makes the % command work better, but it is not backwards
# compatible.
# The ! means the package won't be loaded right away but when plugins are
# loaded during initialization.
if has('syntax') && has('eval')
  packadd! matchit
endif
set nocompatible
filetype off                  # required

# set the runtime path to include Vundle and initialize
if has('win32')
    set rtp+=~/vimfiles/bundle/Vundle.vim
else
    set rtp+=~/.vim/bundle/Vundle.vim
endif

call vundle#begin()
# alternatively, pass a path where Vundle should install plugins
#call vundle#begin('~/some/path/here')

# let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
#Plugin 'Valloric/YouCompleteMe'
Plugin 'tomasiser/vim-code-dark'
Plugin 'dunstontc/vim-vscode-theme'
Plugin 'altercation/vim-colors-solarized'
Plugin 'dracula/vim'
Plugin 'jnurmine/Zenburn'
Plugin 'nanotech/jellybeans.vim'
Plugin 'tomasr/molokai'
Plugin 'nathanalderson/yang.vim'
Plugin 'ludovicchabant/vim-lawrencium'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-fugitive'
Plugin 'preservim/tagbar'
Plugin 'morhetz/gruvbox'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'junegunn/fzf'
#Plugin 'junegunn/fzf.vim' #using my own fork for Mercurial
Plugin 'preservim/nerdtree'


# All of your Plugins must be added before the following line
call vundle#end()            # required
filetype plugin indent on    # required
# To ignore plugin indent changes, instead use:
#filetype plugin on

#set runtimepath^=~/.vim/bundle/ctrlp.vim
#g:ctags_statusline = 1
set fo-=t
set fo+=j
syntax on
#set t_Co=256
# Unbind some useless/annoying default key bindings.
nmap Q <Nop> " 'Q' in normal mode enters Ex mode. You almost never want this.
#set number
#set relativenumber

set t_Co=256
g:solarized_termcolors = 256
set background=dark
#g:airline#extensions#tabline#enabled = 1
#set background=light

#colorscheme solarized
#colorscheme molokai
colorscheme desert256
#colorscheme desert
#colorscheme codedark
#colorscheme default
#colorscheme solarize/
#colorscheme zenburn
#g:airline_theme = 'simple'
#set tags=./tags,tags,~/work/tags
#set tags=./tags;~/work/main_repo
# Begin looking for tags from current file's directory and walk up the
# hiearchy until root directory.
set tags=./tags;~/work
set synmaxcol=500
# The next command is from christosc/fzf.vim
nnoremap <silent> <C-p> :Files<CR>
nnoremap <silent> <F5> :VcFiles<CR>
nnoremap <silent> <leader>b :Buffers<CR>
#g:fzf_vim = {}
#g:fzf_vim.preview_window = ['right,50%', 'ctrl-t']

g:columnlimit = '101'
def ToggleColorColumn()
  if &colorcolumn != ''
    set colorcolumn&  #setlocal colorcolumn&
  else
    &colorcolumn = g:columnlimit  #setlocal colorcolumn=81
  endif
enddef


nnoremap <silent> <leader>c <ScriptCmd>ToggleColorColumn()<CR>
set pastetoggle=<F2>
#nnoremap <silent> <F3> :redir @a<CR>:g//<CR>:redir END<CR>:new<CR>:put! a<CR>
command! -nargs=? Filter @a = '' | execute 'g/<args>/y A' | new | setlocal bt=nofile | put! a
highlight ColorColumn ctermbg=DarkGrey
inoremap jj <Esc>
# Emulate Emacs keybindings when editing...
inoremap <C-b> <left>
inoremap <C-f> <right>
#noremap <Leader>a :call CurtineIncSw()<CR>
# Use :fin[d] %:t:r.hpp or %:t:r.cpp to switch between header and
# implementation files. (See also :help expand.)
# Searches recursively relative to current directory of vim.
set path=include/**,src/**,export/**,source/**,**
set incsearch
#noremap <F1> <Nop>
noremap <silent> <F3> :set hls!<cr>
#noremap <silent> <F3> :noh<cr>
#noremap <silent> <space> :noh<cr>

set nohls #highlight search
#g:loaded_matchparen = 1
set ignorecase
set tagcase=smart
# Ignore case for buffer names
#set wildignorecase
#set fileignorecase
set smartcase
set linebreak
#noremap j gj
#noremap k gk
#noremap 0 g0
#noremap $ g$
set bs=2
set autoindent
set smartindent
#noremap <Leader>s :update<CR>
noremap <Leader>w :write<CR>
set mouse=v
set exrc
set secure
set laststatus=2
set ruler
#set ttyfast
#set lazyredraw

# find files and populate the quickfix list
def FindFiles(filename: string)
  var error_file = tempname()
  silent exe '!find . -name "'.a:filename.'" | xargs file | sed "s/:/:1:/" > '.error_file
  set errorformat=%f:%l:%m
  exe "cfile ". error_file
  copen
  delete(error_file)
enddef
command! -nargs=1 FindFile call FindFiles(<q-args>)

# To exclude Emacs temporary files beginning with a '#' symbol, it was
# necessary to escape # character with shellescape as shown, because it was
# getting expanded to the 'alternate' buffer name.
&grepprg = "grep -nI --exclude='*~' --exclude=tags\ --exclude=TAGS --exclude-dir={.hg,.git} --exclude=" .. shellescape("#", 1) .. "'*' --exclude='*.orig'"
#set grepprg='grep -nI --exclude-dir={.hg,.git} $*'

# Count the occurrences of the word under cursor
map <leader>* *<C-O>:%s///gn<CR>


set ttymouse=xterm2

set et
set ts=4
set sw=4
set sts=4  # feels like if working with tabs!
set shiftround
set smarttab
set showcmd

set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
noremap <F6> :set list!<CR>
inoremap <F6> <C-o>:set list!<CR>
cnoremap <F6> <C-c>:set list!<CR>
setglobal complete=.,w,b,u
set mouse=a
# bind \ (backward slash) to grep shortcut
command! -nargs=1 Gr exec ':silent! grep'.<args>|redraw!
command! -nargs=1 Grep exec ':silent! :grep'.<args>|redraw!|copen
command! -nargs=1 GrDef exec ':silent! grep "::'.<args>.'"'

#  Search mappings using quickfix list
#nnoremap <silent><leader>gf :grep! "\b<cword>\b" -r %:h<CR>:botright cwindow<CR>
#nnoremap <leader>gp :grep! "\b<cword>\b" -r %:p:h:h<CR>:botright cwindow<CR>
#nnoremap <leader>g. :grep! "\b<cword>\b" -r .<CR>:botright cwindow<CR>
#nnoremap <leader>o :vim /\<<c-r>=expand('<cword>')<CR>\>/j %<CR>:botright cwindow<CR>
#nnoremap <leader>O :vim /\<<c-r>=expand('<cword>')<CR>\>\C/j %<CR>:botright cwindow<CR>

# Search mappings using quickfix list
nnoremap <silent><leader>gf :grep! "\b<cword>\b" -r %:h<CR>:copen<CR>
nnoremap <leader>gp :grep! "\b<cword>\b" -r %:p:h:h<CR>:copen<CR>
nnoremap <leader>g. :grep! "\b<cword>\b" -r .<CR>:copen<CR>
nnoremap <leader>o :vim /\<<c-r>=expand('<cword>')<CR>\>/j %<CR>:copen<CR>
nnoremap <leader>O :vim /\<<c-r>=expand('<cword>')<CR>\>\C/j %<CR>:copen<CR>

#nnoremap T :silent! grep "::<cword>\b" -r .<CR>:redraw!<CR>
nnoremap <leader>l :lcd %:p:h<CR>
nnoremap <leader>L :lcd %:p:h:h<CR>
nnoremap <leader>lo :lopen<CR>
nnoremap <leader>lc :lclose<CR>
nnoremap <silent><leader>d /\w\s\+\(\w\+::\)\{,1}<c-r>=expand('<cword>')<CR>(\\|\(\*\\|>\\|&\)\(\s*\\|\(\s*\w\+::\)\)<c-r>=expand('<cword>')<CR>(<CR>
nnoremap <silent><leader>D :silent! lgrep! "\\w\\s\\+\\(\\w\\+::\\)\\?<cword>(\\\|\\(\\*\\\|>\\\|&\\)\\(\\s*\\\|\\(\\s*\\w\\+::\\)\\)<cword>(" -r %:p:h<CR>:redraw!<CR>:silent! llast<CR>

command! -nargs=1 Def /\w\s\+\(\w\+::\)\{,1}<args>(\|\(\*\|>\|&\)\(\s*\|\(\s*\w\+::\)\)<args>(

def GrepRec(pat: string)
    silent! execute 'lgrep! "\\w\\s\\+\\(\\w\\+::\\)\\?' .. a:pat .. '(\\\|\\(\\*\\\|>\\\|&\\)\\(\\s*\\\|\\(\\s*\\w\\+::\\)\\)' .. a:pat .. '(" -r ' . expand("%:p:h")
    redraw!
    silent! llast
enddef

command! -nargs=1 Defr call GrepRec("<args>")

set keymap=greek_mac
set iminsert=0
set imsearch=-1
inoremap <C-\> <C-^>
#inoremap <silent><ESC> <ESC>:set iminsert=0<CR>
def ToggleKeymap()
    if &keymap=='greek_mac'
        set keymap=
    else
        set keymap=greek_mac
    endif
enddef

nnoremap <C-\> <ScriptCmd>ToggleKeymap()<CR>

#Don't suppress bells. They may be actually useful...
#set noeb vb t_vb=
nnoremap <Leader>b# :b#<CR>
set termencoding=utf-8
set encoding=utf-8
setglobal fileencoding=utf-8

autocmd BufRead,BufNewFile *.cpp,*.c,*.h,*.hpp setlocal tw=80
#autocmd! BufWinEnter quickfix setlocal nowinfixheight

# Don't take tags and included files into account in completing words.
# I dont' use tags anyway.
set complete-=t
set complete-=i

def ToggleQuickFix()
    if empty(filter(getwininfo(), 'v:val.quickfix'))
        botright cwindow
    else
        cclose
    endif
enddef

nnoremap <silent> <F4> <ScriptCmd>ToggleQuickFix()<CR>
nnoremap <silent> <F5> :VcFiles<CR>
nnoremap <silent> <F1> :NERDTreeToggle<CR>
inoremap <silent> <F1> <C-o>:NERDTreeToggle<CR>

set noerrorbells
#set wildmenu
#set wildmode=longest:full,full
set title
#set shortmess=a
set shortmess-=S  #Show [x/y] for search results

if has('clipboard')     # If the feature is available
  set clipboard=unnamed # copy to the system clipboard

  if has('unnamedplus')
    set clipboard+=unnamedplus
  endif
endif

# Setting to indent wrapped lines
if exists('+breakindent')
  set breakindent
  #set breakindentopt=shift:2
endif

nmap <F8> :TagbarToggle<CR>

# Functions for status line config since these functions aren't loaded
# when the vimrc is sourced
#def CurrentTag(...)
#  if exists('g:tagbar_iconchars')
#    return call('tagbar#currenttag', a:000)
#  else
#    return ''
#  endif
#enddef

def SyntasticStatuslineFlag()
  return ''
enddef

#let g:tagbar_width = max([25, winwidth(0) / 5])
g:tagbar_ctags_bin = "/data/chryssoc/bin/ctags"
runtime macros/matchit.vim
set scrolloff&  #Do not scroll automatically near the bottom or top of the window (revert value from defaults.vim)

noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

set hidden
#set t_ut=""

# Auto-detect Freemarker (ftl) file type.
augroup filetypedetect
  au BufNewFile,BufRead *.ftl setf ftl
augroup END

#set autochdir
# YAML files by default don't get indented correctly. This fixes the issue.
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType json setlocal ts=2 sts=2 sw=2 expandtab
#set showbreak=\
#source /home/chryssoc/.vim/pack/vendor/start/a/a.vim

g:tagbar_position = 'vertical leftabove'
g:tagbar_sort = 0  # Sort by position in file

set backupdir=~/tmp,/tmp
set directory=~/tmp,/tmp
set undodir=~/tmp,/tmp

# Find potential "other" files:
#    .cpp => .h,.hpp
#    .hpp => .cpp
#    .c   => .h
#    .h   => .cpp,.c
# It uses the find command, which should have the 'path' variable
# appropriately set.
def PotentialOtherFiles(filepath: string): list<string>
    #echo "filepath = " .. filepath
    var tgt_ext = ""
    const src_ext = fnamemodify(filepath, ":e")
    #echo "src_ext = " .. src_ext
    if src_ext == "cpp"
        tgt_ext = "hpp"
    elseif src_ext == "hpp"
        tgt_ext = "cpp"
    elseif src_ext == "c"
        tgt_ext = "h"
    elseif src_ext == "h"
        tgt_ext = "c"
    else
        echo "Unknown file extention."
    endif
    var files = []
    if tgt_ext != ""
        const basename = fnamemodify(filepath, ":t:r")
        files = files + [basename .. "." .. tgt_ext]
        if src_ext == "cpp"
            files = files + [basename .. ".h"]
        elseif src_ext == "h"
            files = files + [basename .. ".cpp"]
        endif
    endif
    return files
enddef

def SwitchToOtherFile(others: list<string>, cmd: string)
    const nOthers = len(others)
    if nOthers == 0
        throw "File extension unknown"
    endif
    try
        exe cmd .. ' ' .. get(others, 0)
    catch /E345:/
        if nOthers > 1
            exe cmd .. ' ' .. get(others, 1)
        endif
    endtry
enddef

command! A call SwitchToOtherFile(PotentialOtherFiles(expand('%')), 'find')
command! AS call SwitchToOtherFile(PotentialOtherFiles(expand('%')), 'sfind')
command! AV call SwitchToOtherFile(PotentialOtherFiles(expand('%')), 'vert sfind')

set omnifunc=syntaxcomplete#Complete

set diffopt=filler,vertical

# I don't like the hint about the command-line window.
augroup vimHints | exe 'au!' | augroup END

# Access old (recent) files easily.
nnoremap <leader>r :bro ol<CR>

# I will try this out... This works as in Emacs.
# set autochdir
#set path=../include/**,../src/**,../export/**,../source/**,** # Make search relative to current WD. I try this out together with autochdir.

def g:HgBranch(): string
    #return "Hello"
    #return system("hg --cwd " .. expand("%:p:h") .. "  bookmarks 2>/dev/null | grep  '\*'")
    var bookmark = substitute(system("hg book -ql ."), '\n\+$', '', '')
    return bookmark
    #return trim(system("hg --cwd " .. expand("%:p:h") .. " bookmarks"))
enddef

#Leveraging here Tagbars' function for finding the tag we are currently near.
#set statusline=%<%f\ \ \ \ \ \ \ \ %{tagbar#currenttag('%s','','')}\ %{g:HgBranch()}\ %h%m%r%=%-14.(%l,%c%V%)\ %P
#set statusline+=\ %{tagbar#currenttag('%s','','')}
#set statusline=%<%{expand('%:~:.')}\ %{toupper(mode())}\ %h%m%r\ %14.(%l,%c%V%)\ \ %P

# By doing this trick with expand() of the filepath, we make sure that the
# filepath is displayed relatively to the current directory.
#set statusline=%<%{expand('%:~:.')}\ %{toupper(mode())}\ %h%m%r%=%-14.(%l,%c%V%)\ %P
#set statusline=%<\ %{toupper(mode())}\ %{expand('%:~:.')}\ %h%m%r%=%-14.(%l,%c%V%)\ %P

#set statusline=%<%t\ %{toupper(mode())}\ %h%m%r\ %14.(%l,%c%V%)\ \ %P
g:airline#extensions#branch#displayed_head_limit = 22
